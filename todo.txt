Priority
   log to file, view log view webpage
   control:  cleanly rebuild DB -  causes thread error on rebuild
   consolidate all jquery files, make sure all loads are local
   add genre entity list
   fix configobj unicode issues
   test unicode user folder
   

----------------
Database:
   Versioning scheme?? (migrate or rebuild with each change?)
   genre as a list??
   bug: per_page setting slice off child lists...?? (mitigated by ordering
   bug: possible cascade confusion on lots of deletes/adds
----------------
General Server
   low priority:  MDNS/bonjour
   more efficient queries (less joins, less selects)
   For shutdown, maybe have a mutex for mod operations to avoid corruption (maybe not needed??)
   Authentication!!

API
   Versioning scheme!
   proper sorting by issue number (numeric, not string)
   selective fields
   search with OR / AND in field

------------------
ENTITY API
      entity list:
		 year? (or decade?)
---------------------------      
Web UI
	  tags in popup
	  scrolling in popup
      details popup: add filesize, last read date
	  
Monitor
  watchdog doesn't trigger on file moving out of watched area
    
OS Integration:
   add minimal GUI front end for windows and mac
      Mac OS - icon and dropdown menu
      Windows, status box icon and menu
   Linux init script to run as server
   
   Look into SABZBd/couch potato implementation

HTML READER feature requests
   pass in metadata or HTML text/element for display via toolbar
   keystrokes for zooming in/out
   page turn callback function (for bookmark)
   general touch/mobile interface
   show page number and/or progress bar


------------------------

---------------------
Requirements:
   tornado
   sqlalchemy > 0.9
   watchdog
   dateutil
   pil
   configobj
   comictagger
  
-------------------
Bonus SQL!
-------------------
CREATE VIEW credits_view AS
select comics.id, persons.name as person, roles.name as role
from comics 
inner join credits
   on credits.comic_id=comics.id
inner join persons
   on credits.person_id=persons.id
inner join roles 
   on credits.role_id=roles.id
where comics.id=1 
-------------------


Convert single item query to simple list
      [i[0] for i in list(q)]

import pdb; pdb.set_trace()
will enter the python debugger at that point

import code; code.interact(local=locals())  ####ATB Debug    
      
c=s.query(Comic).join(Credit).join(Role).join(Person).filter(Role.name=="penciller").filter(Person.name=="Jeff Lemire")

s.query(Comic).join(Credit).join(Person).filter(Person.name=='Jeff Lemire').filter(Credit.person_id==Person.id).filter(Credit.role_id==Role.id).filter(Role.name=='writer')

person='Jeff Lemire'
role='penciller'
q = s.query(Comic)
q = q.join(Credit).filter(Person.name==person).filter(Credit.person_id==Person.id)
q = q.filter(Credit.role_id==Role.id).filter(Role.name==role)
q.count()

--------------------
      //--------------------------------------------------
      //!!!ATB - personal hack for sorting and searching with comicstreamer
      if ("sorts" in options.data)
      {
        name = Object.keys(options.data.sorts)[0];
        desc = '';
        if (options.data.sorts[name]==-1)
        {
          desc = '-';
        }
        options.data.order = desc+name;
      }
      if ("queries" in options.data)
      {
        for (var key in options.data.queries) {
          if (options.data.queries.hasOwnProperty(key))
          {
            newkey = key;
            if (key == 'search')
            {
              newkey = 'keyphrase';
            }
            // move the item from queries up one level
            options.data[newkey] = options.data.queries[key];
          }
        }        
      }
      //--------------------------------------------------
      $.ajax(options);
